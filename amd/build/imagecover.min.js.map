{"version":3,"file":"imagecover.min.js","sources":["../src/imagecover.js"],"sourcesContent":["/**\n * This file is part of Moodle - http://moodle.org/\n *\n * Moodle is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * Moodle is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n *\n * Library to add image covers to prevent seizure inducing images from showing.\n *\n * @package\n * @author    Guy Thomas\n * @copyright Copyright (c) 2016 Open LMS / 2023 Anthology Inc. and its affiliates\n * @license   http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport $ from 'jquery';\nimport Util from 'filter_ally/util';\n\nclass ImageCover {\n    #applySizing() {\n        $('.ally-image-wrapper').each(function() {\n            const wrapper = this;\n\n            // Note - we are using .attr and not .data so that we can observe what is happening to the dom elements.\n            if ($(wrapper).attr('data-processed')) {\n                return;\n            }\n\n            $(wrapper).attr('data-processed', 1);\n\n            const img = $(wrapper).find('img');\n            const cover = $(wrapper).find('.ally-image-cover');\n            const feedback = $(wrapper).find('.ally-feedback');\n            const marginTop = parseInt($(img).css('marginTop'));\n            const marginLeft = parseInt($(img).css('marginLeft'));\n\n            const debounceCoordsChanged = Util.debounce(function(coords) {\n                const width = (coords.right - coords.left);\n                const height = (coords.bottom - coords.top);\n                $(cover)\n                    .css('width', width + 'px')\n                    .css('height', height + 'px');\n                const topPos = $(img).position().top + marginTop;\n                const leftPos = $(img).position().left + marginLeft;\n                $(cover)\n                    .css('top', topPos + 'px')\n                    .css('left', leftPos + 'px');\n                if (feedback.length) {\n                    feedback\n                        .css('top', (topPos + height - feedback.height()) + 'px')\n                        .css('left', leftPos + 'px');\n                }\n            }, 1000);\n\n            Util.onCoordsChange(img, function(coords) {\n                debounceCoordsChanged(coords);\n            });\n        });\n    }\n\n    init() {\n        $(document).ready(this.#applySizing);\n        const targetNode = document;\n        const observerOptions = {\n            childList: true,\n            attributes: true,\n            subtree: true\n        };\n        /**\n         *  By using an event combined with a mutation observer that disconnects itself,\n         *  we can manage to have a mutation observer that works after page content lazy loaded by loaded in snap.\n         *  the interval is added as a redundancy to prevent calculation errors by correcting the indicator position.\n         * */\n        $(document).on('snap-course-content-loaded', () => {\n            const observer = new MutationObserver(() => {\n                let count = 0;\n                let interval = setInterval(() => {\n                    if (count < 5) {\n                        this.#applySizing();\n                        count++;\n                    } else {\n                        clearTimeout(interval);\n                    }\n                }, 500);\n                observer.disconnect();\n            });\n            observer.observe(targetNode, observerOptions);\n        });\n    }\n}\n\nexport default new ImageCover();\n"],"names":["each","this","attr","img","find","cover","feedback","marginTop","parseInt","css","marginLeft","debounceCoordsChanged","Util","debounce","coords","width","right","left","height","bottom","top","topPos","position","leftPos","length","onCoordsChange","init","document","ready","targetNode","observerOptions","childList","attributes","subtree","on","observer","MutationObserver","count","interval","setInterval","clearTimeout","disconnect","observe"],"mappings":"szBA6BU,uBAAuBA,MAAK,eAItB,mBAHYC,MAGDC,KAAK,6CAHJD,MAOLC,KAAK,iBAAkB,SAE5BC,KAAM,mBATIF,MASOG,KAAK,OACtBC,OAAQ,mBAVEJ,MAUSG,KAAK,qBACxBE,UAAW,mBAXDL,MAWYG,KAAK,kBAC3BG,UAAYC,UAAS,mBAAEL,KAAKM,IAAI,cAChCC,WAAaF,UAAS,mBAAEL,KAAKM,IAAI,eAEjCE,sBAAwBC,cAAKC,UAAS,SAASC,cAC3CC,MAASD,OAAOE,MAAQF,OAAOG,KAC/BC,OAAUJ,OAAOK,OAASL,OAAOM,wBACrCf,OACGI,IAAI,QAASM,MAAQ,MACrBN,IAAI,SAAUS,OAAS,YACtBG,QAAS,mBAAElB,KAAKmB,WAAWF,IAAMb,UACjCgB,SAAU,mBAAEpB,KAAKmB,WAAWL,KAAOP,+BACvCL,OACGI,IAAI,MAAOY,OAAS,MACpBZ,IAAI,OAAQc,QAAU,MACvBjB,SAASkB,QACTlB,SACKG,IAAI,MAAQY,OAASH,OAASZ,SAASY,SAAY,MACnDT,IAAI,OAAQc,QAAU,QAEhC,mBAEEE,eAAetB,KAAK,SAASW,QAC9BH,sBAAsBG,2BAoCvB,uEA/BXY,2BACMC,UAAUC,6BAAM3B,wCACZ4B,WAAaF,SACbG,gBAAkB,CACpBC,WAAW,EACXC,YAAY,EACZC,SAAS,uBAOXN,UAAUO,GAAG,8BAA8B,WACnCC,SAAW,IAAIC,kBAAiB,SAC9BC,MAAQ,EACRC,SAAWC,aAAY,KACnBF,MAAQ,sEAERA,SAEAG,aAAaF,YAElB,KACHH,SAASM,gBAEbN,SAASO,QAAQb,WAAYC"}